{"version":3,"file":"lite-yt-embed.js","sourceRoot":"","sources":["../../src/components/video-lite/lite-yt-embed.js"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\r\n *\r\n * Thx to these as the inspiration\r\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\r\n *   https://autoplay-youtube-player.glitch.me/\r\n *\r\n * Once built it, I also found these:\r\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\r\n *   https://github.com/Daugilas/lazyYT\r\n *   https://github.com/vb/lazyframe\r\n */\r\nexport default class LiteYTEmbed extends HTMLElement {\r\n  connectedCallback() {\r\n    this.videoId = this.getAttribute('videoid');\r\n\r\n    let playBtnEl = this.querySelector('.lty-playbtn');\r\n    // A label for the button takes priority over a [playlabel] attribute on the custom-element\r\n    this.playLabel =\r\n      (playBtnEl && playBtnEl.textContent.trim()) ||\r\n      this.getAttribute('playlabel') ||\r\n      'Play';\r\n\r\n    /**\r\n     * Lo, the youtube placeholder image!  (aka the thumbnail, poster image, etc)\r\n     *\r\n     * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\r\n     *\r\n     * TODO: Do the sddefault->hqdefault fallback\r\n     *       - When doing this, apply referrerpolicy (https://github.com/ampproject/amphtml/pull/3940)\r\n     * TODO: Consider using webp if supported, falling back to jpg\r\n     */\r\n    if (!this.style.backgroundImage) {\r\n      this.posterUrl = `https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg`;\r\n      // Warm the connection for the poster image\r\n      LiteYTEmbed.addPrefetch('preload', this.posterUrl, 'image');\r\n\r\n      this.style.backgroundImage = `url(\"${this.posterUrl}\")`;\r\n    }\r\n\r\n    // Set up play button, and its visually hidden label\r\n    if (!playBtnEl) {\r\n      playBtnEl = document.createElement('button');\r\n      playBtnEl.type = 'button';\r\n      playBtnEl.classList.add('lty-playbtn');\r\n      this.append(playBtnEl);\r\n    }\r\n    if (!playBtnEl.textContent) {\r\n      const playBtnLabelEl = document.createElement('span');\r\n      playBtnLabelEl.className = 'lyt-visually-hidden';\r\n      playBtnLabelEl.textContent = this.playLabel;\r\n      playBtnEl.append(playBtnLabelEl);\r\n    }\r\n\r\n    // On hover (or tap), warm up the TCP connections we're (likely) about to use.\r\n    this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {\r\n      once: true,\r\n    });\r\n\r\n    // Once the user clicks, add the real iframe and drop our play button\r\n    // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\r\n    //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\r\n    this.addEventListener('click', (e) => this.addIframe());\r\n  }\r\n\r\n  // // TODO: Support the the user changing the [videoid] attribute\r\n  // attributeChangedCallback() {\r\n  // }\r\n\r\n  /**\r\n   * Add a <link rel={preload | preconnect} ...> to the head\r\n   */\r\n  static addPrefetch(kind, url, as) {\r\n    const linkEl = document.createElement('link');\r\n    linkEl.rel = kind;\r\n    linkEl.href = url;\r\n    if (as) {\r\n      linkEl.as = as;\r\n    }\r\n    document.head.append(linkEl);\r\n  }\r\n\r\n  /**\r\n   * Begin pre-connecting to warm up the iframe load\r\n   * Since the embed's network requests load within its iframe,\r\n   *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\r\n   * So, the best we can do is warm up a few connections to origins that are in the critical path.\r\n   *\r\n   * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\r\n   * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\r\n   */\r\n  static warmConnections() {\r\n    if (LiteYTEmbed.preconnected) return;\r\n\r\n    // The iframe document and most of its subresources come right off youtube.com\r\n    LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\r\n    // The botguard script is fetched off from google.com\r\n    LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\r\n\r\n    // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\r\n    LiteYTEmbed.addPrefetch(\r\n      'preconnect',\r\n      'https://googleads.g.doubleclick.net'\r\n    );\r\n    LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\r\n\r\n    LiteYTEmbed.preconnected = true;\r\n  }\r\n\r\n  addIframe() {\r\n    const params = new URLSearchParams(this.getAttribute('params') || []);\r\n    params.append('autoplay', '1');\r\n\r\n    const iframeEl = document.createElement('iframe');\r\n    iframeEl.width = 560;\r\n    iframeEl.height = 315;\r\n    // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\r\n    iframeEl.title = this.playLabel;\r\n    iframeEl.allow =\r\n      'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\r\n    iframeEl.allowFullscreen = true;\r\n    // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\r\n    // https://stackoverflow.com/q/64959723/89484\r\n    iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(\r\n      this.videoId\r\n    )}?${params.toString()}`;\r\n    this.append(iframeEl);\r\n\r\n    this.classList.add('lyt-activated');\r\n\r\n    // Set focus for a11y\r\n    this.querySelector('iframe').focus();\r\n  }\r\n}\r\n"]}